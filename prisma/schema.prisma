generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  username     String          @unique
  passwordHash String
  role         String          @default("USER")
  blocked      Boolean         @default(false)
  blockedUntil DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lastLogin    DateTime?
  displayName  String?
  avatar       String?
  characters   Character[]
  preferences  UserPreference?
  hasSeenOnboarding Boolean    @default(false)
  notifications Notification[]
  pendingCharacters PendingCharacter[]
}

model Character {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  avatar          String
  fullImage       String?
  age             String?
  gender          String?
  race            String?
  occupation      String?
  likes           String?
  dislikes        String?
  personality     String
  systemPrompt    String
  customInstructions String?
  backstory       String?
  firstMessage    String?
  messageExample  String?
  scenario        String?
  creatorNotes    String?
  alternateGreetings String[]
  tags            String[]
  creator         String?
  characterVersion String?
  extensions      Json?
  userId          Int
  isPublic        Boolean   @default(false)
  reviewStatus    String    @default("private") // "private", "pending", "approved", "rejected"
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        ChatMessage[]
  pendingSubmissions PendingCharacter[] @relation("PendingSubmission")
  order           Int       @default(0)
}

model ChatMessage {
  id          Int       @id @default(autoincrement())
  characterId Int
  role        String
  content     String
  reactions   Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  selectedCharId Int
  chatTheme      String   @default("default")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // e.g., 'CHARACTER_APPROVED', 'CHARACTER_REJECTED'
  title     String
  message   String
  metadata  Json?    // Additional data like characterId, rejectionReason, etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PendingCharacter {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  avatar          String
  fullImage       String?
  age             String?
  gender          String?
  race            String?
  occupation      String?
  likes           String?
  dislikes        String?
  personality     String
  systemPrompt    String
  customInstructions String?
  backstory       String?
  firstMessage    String?
  messageExample  String?
  scenario        String?
  creatorNotes    String?
  alternateGreetings String[]
  tags            String[]
  creator         String?
  characterVersion String?
  extensions      Json?
  userId          Int
  originalCharacterId Int?  // Link to original private character if exists
  status          String    @default("pending") // "pending", "approved", "rejected"
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalCharacter Character? @relation("PendingSubmission", fields: [originalCharacterId], references: [id])
}
